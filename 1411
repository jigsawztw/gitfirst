import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
/* 
User, Loser, Coder and Proger
*/

public class Solution {

public interface Person {
    class User implements Person {
        void live() {
            System.out.println("Usually I just live.");
        }
    }

     class Loser implements Person {
        void doNothing() {
            System.out.println("Usually I do nothing.");
        }
    }

     class Coder implements Person {
        void coding() {
            System.out.println("Usually I create code.");
        }
    }

    class Proger implements Person {
        void enjoy() {
            System.out.println("Wonderful life!");
        }
    }
}
             public static void main(String[] args) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        Person person = null;
        String key;
        ArrayList<Person> x = new ArrayList<>();
        while(true){
            key = reader.readLine();
            if(key.equalsIgnoreCase("proger")){
                person = new Person.Proger();
                x.add(person);
                continue;
            }
            else if(key.equalsIgnoreCase("user")){
                person = new Person.User();
                x.add(person);
                continue;
            }
            else if(key.equalsIgnoreCase("coder")){
                person = new Person.Coder();
                x.add(person);
                continue;
            }
            else if(key.equalsIgnoreCase("loser")){
                person = new Person.Loser();
                x.add(person);
                continue;
            }
            else{
                break;
            }
        }
        for(Person f:x){
            doWork(f);
        }



    }

     public static void doWork(Person person) {
            if(person instanceof Person.User){
                ((Person.User) person).live();
            }
            if(person instanceof Person.Coder){
                ((Person.Coder) person).coding();
            }
            if(person instanceof Person.Proger){
                ((Person.Proger) person).enjoy();
            }
            if(person instanceof Person.Loser){
                ((Person.Loser) person).doNothing();
            }
        }
}
